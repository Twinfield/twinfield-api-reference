//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Twinfield_Webservices_Sample_C_sharp.TwinfieldProcessXml {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ProcessXmlSoap", Namespace="http://www.twinfield.com/")]
    public partial class ProcessXml : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private Header headerValueField;
        
        private System.Threading.SendOrPostCallback ProcessXmlStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessXmlDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessXmlCompressedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ProcessXml() {
            this.Url = global::Twinfield_Webservices_Sample_C_sharp.Properties.Settings.Default.Twinfield_Webservices_Sample_C_sharp_TwinfieldProcessXml_ProcessXml;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Header HeaderValue {
            get {
                return this.headerValueField;
            }
            set {
                this.headerValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ProcessXmlStringCompletedEventHandler ProcessXmlStringCompleted;
        
        /// <remarks/>
        public event ProcessXmlDocumentCompletedEventHandler ProcessXmlDocumentCompleted;
        
        /// <remarks/>
        public event ProcessXmlCompressedCompletedEventHandler ProcessXmlCompressedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.twinfield.com/ProcessXmlString", RequestNamespace="http://www.twinfield.com/", ResponseNamespace="http://www.twinfield.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessXmlString(string xmlRequest) {
            object[] results = this.Invoke("ProcessXmlString", new object[] {
                        xmlRequest});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessXmlStringAsync(string xmlRequest) {
            this.ProcessXmlStringAsync(xmlRequest, null);
        }
        
        /// <remarks/>
        public void ProcessXmlStringAsync(string xmlRequest, object userState) {
            if ((this.ProcessXmlStringOperationCompleted == null)) {
                this.ProcessXmlStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessXmlStringOperationCompleted);
            }
            this.InvokeAsync("ProcessXmlString", new object[] {
                        xmlRequest}, this.ProcessXmlStringOperationCompleted, userState);
        }
        
        private void OnProcessXmlStringOperationCompleted(object arg) {
            if ((this.ProcessXmlStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessXmlStringCompleted(this, new ProcessXmlStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.twinfield.com/ProcessXmlDocument", RequestNamespace="http://www.twinfield.com/", ResponseNamespace="http://www.twinfield.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ProcessXmlDocument(System.Xml.XmlNode xmlRequest) {
            object[] results = this.Invoke("ProcessXmlDocument", new object[] {
                        xmlRequest});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessXmlDocumentAsync(System.Xml.XmlNode xmlRequest) {
            this.ProcessXmlDocumentAsync(xmlRequest, null);
        }
        
        /// <remarks/>
        public void ProcessXmlDocumentAsync(System.Xml.XmlNode xmlRequest, object userState) {
            if ((this.ProcessXmlDocumentOperationCompleted == null)) {
                this.ProcessXmlDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessXmlDocumentOperationCompleted);
            }
            this.InvokeAsync("ProcessXmlDocument", new object[] {
                        xmlRequest}, this.ProcessXmlDocumentOperationCompleted, userState);
        }
        
        private void OnProcessXmlDocumentOperationCompleted(object arg) {
            if ((this.ProcessXmlDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessXmlDocumentCompleted(this, new ProcessXmlDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.twinfield.com/ProcessXmlCompressed", RequestNamespace="http://www.twinfield.com/", ResponseNamespace="http://www.twinfield.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ProcessXmlCompressed([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] xmlRequest) {
            object[] results = this.Invoke("ProcessXmlCompressed", new object[] {
                        xmlRequest});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ProcessXmlCompressedAsync(byte[] xmlRequest) {
            this.ProcessXmlCompressedAsync(xmlRequest, null);
        }
        
        /// <remarks/>
        public void ProcessXmlCompressedAsync(byte[] xmlRequest, object userState) {
            if ((this.ProcessXmlCompressedOperationCompleted == null)) {
                this.ProcessXmlCompressedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessXmlCompressedOperationCompleted);
            }
            this.InvokeAsync("ProcessXmlCompressed", new object[] {
                        xmlRequest}, this.ProcessXmlCompressedOperationCompleted, userState);
        }
        
        private void OnProcessXmlCompressedOperationCompleted(object arg) {
            if ((this.ProcessXmlCompressedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessXmlCompressedCompleted(this, new ProcessXmlCompressedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.twinfield.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.twinfield.com/", IsNullable=false)]
    public partial class Header : System.Web.Services.Protocols.SoapHeader {
        
        private string sessionIDField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ProcessXmlStringCompletedEventHandler(object sender, ProcessXmlStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessXmlStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessXmlStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ProcessXmlDocumentCompletedEventHandler(object sender, ProcessXmlDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessXmlDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessXmlDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ProcessXmlCompressedCompletedEventHandler(object sender, ProcessXmlCompressedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessXmlCompressedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessXmlCompressedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591