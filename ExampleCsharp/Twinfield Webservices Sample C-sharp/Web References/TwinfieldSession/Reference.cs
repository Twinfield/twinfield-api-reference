//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Twinfield_Webservices_Sample_C_sharp.TwinfieldSession {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SessionSoap", Namespace="http://www.twinfield.com/")]
    public partial class Session : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private Header headerValueField;
        
        private System.Threading.SendOrPostCallback LogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback OAuthLogonOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Session() {
            this.Url = global::Twinfield_Webservices_Sample_C_sharp.Properties.Settings.Default.Twinfield_Webservices_Sample_C_sharp_TwinfieldSession_Session;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Header HeaderValue {
            get {
                return this.headerValueField;
            }
            set {
                this.headerValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LogonCompletedEventHandler LogonCompleted;
        
        /// <remarks/>
        public event OAuthLogonCompletedEventHandler OAuthLogonCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.twinfield.com/Logon", RequestNamespace="http://www.twinfield.com/", ResponseNamespace="http://www.twinfield.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogonResult Logon(string user, string password, string organisation, out LogonAction nextAction, out string cluster) {
            object[] results = this.Invoke("Logon", new object[] {
                        user,
                        password,
                        organisation});
            nextAction = ((LogonAction)(results[1]));
            cluster = ((string)(results[2]));
            return ((LogonResult)(results[0]));
        }
        
        /// <remarks/>
        public void LogonAsync(string user, string password, string organisation) {
            this.LogonAsync(user, password, organisation, null);
        }
        
        /// <remarks/>
        public void LogonAsync(string user, string password, string organisation, object userState) {
            if ((this.LogonOperationCompleted == null)) {
                this.LogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonOperationCompleted);
            }
            this.InvokeAsync("Logon", new object[] {
                        user,
                        password,
                        organisation}, this.LogonOperationCompleted, userState);
        }
        
        private void OnLogonOperationCompleted(object arg) {
            if ((this.LogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonCompleted(this, new LogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.twinfield.com/OAuthLogon", RequestNamespace="http://www.twinfield.com/", ResponseNamespace="http://www.twinfield.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogonResult OAuthLogon(string clientToken, string clientSecret, string accessToken, string accessSecret, out LogonAction nextAction, out string cluster) {
            object[] results = this.Invoke("OAuthLogon", new object[] {
                        clientToken,
                        clientSecret,
                        accessToken,
                        accessSecret});
            nextAction = ((LogonAction)(results[1]));
            cluster = ((string)(results[2]));
            return ((LogonResult)(results[0]));
        }
        
        /// <remarks/>
        public void OAuthLogonAsync(string clientToken, string clientSecret, string accessToken, string accessSecret) {
            this.OAuthLogonAsync(clientToken, clientSecret, accessToken, accessSecret, null);
        }
        
        /// <remarks/>
        public void OAuthLogonAsync(string clientToken, string clientSecret, string accessToken, string accessSecret, object userState) {
            if ((this.OAuthLogonOperationCompleted == null)) {
                this.OAuthLogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOAuthLogonOperationCompleted);
            }
            this.InvokeAsync("OAuthLogon", new object[] {
                        clientToken,
                        clientSecret,
                        accessToken,
                        accessSecret}, this.OAuthLogonOperationCompleted, userState);
        }
        
        private void OnOAuthLogonOperationCompleted(object arg) {
            if ((this.OAuthLogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OAuthLogonCompleted(this, new OAuthLogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.twinfield.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.twinfield.com/", IsNullable=false)]
    public partial class Header : System.Web.Services.Protocols.SoapHeader {
        
        private string sessionIDField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.twinfield.com/")]
    public enum LogonResult {
        
        /// <remarks/>
        Ok,
        
        /// <remarks/>
        Blocked,
        
        /// <remarks/>
        Untrusted,
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        Deleted,
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        OrganisationInactive,
        
        /// <remarks/>
        ClientInvalid,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.twinfield.com/")]
    public enum LogonAction {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        SMSLogon,
        
        /// <remarks/>
        ChangePassword,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LogonCompletedEventHandler(object sender, LogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogonResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogonResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public LogonAction nextAction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogonAction)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string cluster {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void OAuthLogonCompletedEventHandler(object sender, OAuthLogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OAuthLogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OAuthLogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogonResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogonResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public LogonAction nextAction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogonAction)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string cluster {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591